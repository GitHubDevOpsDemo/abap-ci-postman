{
	"info": {
		"name": "abap_unit_coverage",
		"_postman_id": "a6d5cc81-2518-8553-8cae-0b01290e39f2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (tests[\"X-CSRF-Token is present\"] = responseHeaders.hasOwnProperty(\"x-csrf-token\")) {",
							"    postman.setEnvironmentVariable(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
							"} else {",
							"    postman.setNextRequest(null);   ",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Display environment variables",
							"console.log(\"==========Environment Variables==========\");",
							"for(var attr in environment){",
							"    console.log(attr + \"=\" + environment[attr]);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-CSRF-Token",
						"value": "Fetch"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/sap/bc/adt/abapunit",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"sap",
						"bc",
						"adt",
						"abapunit"
					]
				}
			},
			"response": []
		},
		{
			"name": "RunABAPUnit",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var totalAlert = 0;",
							"var programAlert = 0;",
							"",
							"function processAlert(alert, level) {",
							"    if (alert.$.severity === \"critical\") {",
							"        totalAlert++;",
							"        programAlert++;",
							"        ",
							"        //Print out error details",
							"        if (alert.details.detail.$ === undefined) {",
							"            tests[\">>\" + alert.title ] = false;",
							"        } else {",
							"            tests[\">>\" + alert.title + \": \" + alert.details.detail.$.text] = false;",
							"        }",
							"    }",
							"}",
							"",
							"function processAlerts(alerts, level) {",
							"    if ((alerts.alert === undefined) || (alerts.alert === \"\")) return;",
							"    if (alerts.alert.length === undefined) {",
							"        processAlert(alerts.alert);",
							"    } else {",
							"        alerts.alert.forEach(function (alert, index, level) {",
							"            processAlert(alert, level);",
							"        });",
							"    }",
							"}",
							"",
							"function processNextNodes(node, level) {",
							"    if (node.testClasses !== undefined) {",
							"        processNodes(node.testClasses.testClass, ++level);",
							"        tests[\"No critical alert for \" + node.$[\"adtcore:packageName\"] + \"/\" + node.$[\"adtcore:type\"] + \"/\" + node.$[\"adtcore:name\"] + \" [Actual=\" + programAlert + \"]\"] = programAlert === 0;",
							"        programAlert = 0;",
							"    } else if (node.testMethods !== undefined) {",
							"        processNodes(node.testMethods.testMethod, ++level);",
							"    }",
							"}",
							"",
							"function processNodes(node, level) {",
							"    if (node === undefined) return;",
							"    if (node.length === undefined) {",
							"        processAlerts(node.alerts, level);",
							"        processNextNodes(node, level);",
							"    } else {",
							"        node.forEach(function (node, index) {",
							"            processAlerts(node.alerts, level);",
							"            processNextNodes(node, level);",
							"        });",
							"    }",
							"}",
							"",
							"if (tests[\"Status code is 200\"] = responseCode.code === 200) {",
							"    var jsonObject = xml2Json(responseBody);",
							"    ",
							"    if (tests[\"Job finished successfully\"] = jsonObject[\"aunit:runResult\"].alerts == \"\") {",
							"        processNodes(jsonObject[\"aunit:runResult\"].program, 0);",
							"    } else {",
							"        processAlerts(jsonObject[\"aunit:runResult\"].alerts, 0);",
							"    }",
							"    ",
							"    if (totalAlert === 0) {",
							"        //Get and set coverage ID",
							"        if (jsonObject[\"aunit:runResult\"].external !== undefined) {",
							"            var uriSegments = jsonObject[\"aunit:runResult\"].external.coverage.$[\"adtcore:uri\"].split(\"/\");",
							"            var coverageID = uriSegments[uriSegments.length - 1];",
							"            tests[\"Coverage ID \" + coverageID ] = true;",
							"            postman.setGlobalVariable(\"coverage_id\", coverageID);",
							"        } else {",
							"            tests[\"No coverage ID, skipping code coverage check...\"] = true;",
							"            postman.setNextRequest(\"CreateWorklist\");",
							"        }",
							"    } else {",
							"        tests[\"ABAP Unit failed. The remaining steps are skipped...\"] = true;",
							"        postman.setNextRequest(null);",
							"    }",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-CSRF-Token",
						"value": "{{x-csrf-token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/xml"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<aunit:runConfiguration xmlns:aunit=\"http://www.sap.com/adt/aunit\">\r\n\t<external>\r\n\t\t<coverage active=\"true\"/>\r\n\t</external>\r\n\t<adtcore:objectSets xmlns:adtcore=\"http://www.sap.com/adt/core\">\r\n\t\t<objectSet kind=\"inclusive\">\r\n\t\t\t<adtcore:objectReferences>\r\n\t\t\t\t<adtcore:objectReference adtcore:uri=\"/sap/bc/adt/vit/wb/object_type/devck/object_name/{{package}}\"/>\r\n\t\t\t</adtcore:objectReferences>\r\n\t\t</objectSet>\r\n\t</adtcore:objectSets>\r\n</aunit:runConfiguration>"
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/sap/bc/adt/abapunit/testruns",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"sap",
						"bc",
						"adt",
						"abapunit",
						"testruns"
					]
				}
			},
			"response": []
		},
		{
			"name": "CheckCodeCoverage",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var coverageType = postman.getEnvironmentVariable(\"coverage_type\");",
							"var minimumCoverage = parseFloat(postman.getEnvironmentVariable(\"coverage_min\"));",
							"var maximumLevel = parseInt(postman.getEnvironmentVariable(\"coverage_maxlevel\"));",
							"var checkLevel = parseInt(postman.getEnvironmentVariable(\"coverage_chklevel\"));",
							"var exclusion = JSON.parse(postman.getEnvironmentVariable(\"exclusion\"));",
							"",
							"function getCoveragePercentage(covStat) {",
							"    if (covStat.total === 0) {",
							"        return \"NA\";",
							"    } else {",
							"        return (covStat.executed / covStat.total * 100).toFixed(2);",
							"    }",
							"}",
							"",
							"function getCoverageStat(node) {",
							"    var coverage = node.coverages.coverage.find(item => item.$.type === coverageType).$;",
							"    var covStat = {\"total\":0,\"executed\":0};",
							"    covStat.total = parseInt(coverage.total);",
							"    covStat.executed = parseInt(coverage.executed);",
							"    return covStat;",
							"}",
							"",
							"function displayCoverageResult(attribute, covStat, level, excluded, reason) {",
							"    var covPercent = getCoveragePercentage(covStat);",
							"    if ((level > checkLevel) || (excluded)) {",
							"        var exclude_str = \"\";",
							"        if (excluded) exclude_str = \" [Excluded: \" + reason +\"]\";",
							"        tests[getPrefixFor(level) + attribute[\"adtcore:type\"] + \"/\" + attribute[\"adtcore:name\"] + \" \" + coverageType + \" coverage = \" + covPercent + \"%\" + exclude_str] = true;",
							"    } else {",
							"        tests[getPrefixFor(level) + attribute[\"adtcore:type\"] + \"/\" + attribute[\"adtcore:name\"] + \" \" + coverageType + \" coverage >= \" + minimumCoverage + \"% [Actual=\" + covPercent + \"%]\"] =  covPercent >= minimumCoverage;",
							"    }",
							"    ",
							"}",
							"",
							"function processNodes(nodes, level, covStat) {",
							"    if (nodes === undefined) return;",
							"    if (nodes.node.length === undefined) {",
							"        testCoverage(nodes.node, level, covStat);",
							"    } else {",
							"        nodes.node.forEach(function (node, index) { ",
							"            testCoverage(node, level, covStat);",
							"        } );",
							"    }",
							"}",
							"",
							"function getPrefixFor(level) {",
							"    var prefix = \"\";",
							"    for (i=0; i<level; i++) {",
							"        prefix += \">>\";",
							"    }",
							"    return prefix;",
							"}",
							"",
							"function isExcluded(name, type) {",
							"    for (var i=0; i<exclusion.length; i++) {",
							"        if ((name === exclusion[i].name) && (type === exclusion[i].type)) return exclusion[i];",
							"    }",
							"    return false;",
							"}",
							"",
							"function testCoverage(node, level, covStat) {",
							"    var attribute = node[\"adtcore:objectReference\"].$;",
							"    var covStatTemp = {\"total\":0,\"executed\":0};",
							"    ",
							"    if ((node.nodes === undefined) || (level >= maximumLevel)) {",
							"        //Leaf node",
							"        covStatTemp = getCoverageStat(node);",
							"    } else {",
							"        //Drill-down",
							"        processNodes(node.nodes, level+1, covStatTemp);",
							"    }",
							"    ",
							"    if (excluded_item = isExcluded(attribute[\"adtcore:name\"], attribute[\"adtcore:type\"])) {",
							"        displayCoverageResult(attribute, covStatTemp, level, true, excluded_item.reason);",
							"    } else {",
							"        displayCoverageResult(attribute, covStatTemp, level);",
							"        covStat.total += covStatTemp.total;",
							"        covStat.executed += covStatTemp.executed;",
							"    }",
							"}",
							"",
							"if (tests[\"Status code is 200\"] = responseCode.code === 200) {",
							"    var jsonObject = xml2Json(responseBody);",
							"    var covStat = {\"total\":0,\"executed\":0};",
							"    ",
							"    processNodes(jsonObject[\"cov:result\"].nodes, 0, covStat);",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-CSRF-Token",
						"value": "{{x-csrf-token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/xml"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<cov:query xmlns:cov=\"http://www.sap.com/adt/cov\" xmlns:adtcore=\"http://www.sap.com/adt/core\">\r\n    <adtcore:objectSets xmlns:adtcore=\"http://www.sap.com/adt/core\">\r\n        <objectSet kind=\"inclusive\">\r\n            <adtcore:objectReferences>\r\n                <adtcore:objectReference adtcore:uri=\"/sap/bc/adt/vit/wb/object_type/devck/object_name/{{package}}\"/>\r\n            </adtcore:objectReferences>\r\n        </objectSet>\r\n    </adtcore:objectSets>\r\n</cov:query>"
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/sap/bc/adt/runtime/traces/coverage/measurements/{{coverage_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"sap",
						"bc",
						"adt",
						"runtime",
						"traces",
						"coverage",
						"measurements",
						"{{coverage_id}}"
					]
				}
			},
			"response": []
		}
	]
}